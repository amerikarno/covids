// Code generated by MockGen. DO NOT EDIT.
// Source: app/app.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	app "github.com/amerikarno/covids/app"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecase is a mock of IUsecase interface.
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase.
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance.
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// GetAges mocks base method.
func (m *MockIUsecase) GetAges() (*app.Ages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAges")
	ret0, _ := ret[0].(*app.Ages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAges indicates an expected call of GetAges.
func (mr *MockIUsecaseMockRecorder) GetAges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAges", reflect.TypeOf((*MockIUsecase)(nil).GetAges))
}

// GetProvince mocks base method.
func (m *MockIUsecase) GetProvince() (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvince")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvince indicates an expected call of GetProvince.
func (mr *MockIUsecaseMockRecorder) GetProvince() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvince", reflect.TypeOf((*MockIUsecase)(nil).GetProvince))
}

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// DecodeJSONUrl mocks base method.
func (m *MockIRepository) DecodeJSONUrl() (app.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeJSONUrl")
	ret0, _ := ret[0].(app.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeJSONUrl indicates an expected call of DecodeJSONUrl.
func (mr *MockIRepositoryMockRecorder) DecodeJSONUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeJSONUrl", reflect.TypeOf((*MockIRepository)(nil).DecodeJSONUrl))
}

// GetInput mocks base method.
func (m *MockIRepository) GetInput() app.Data {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInput")
	ret0, _ := ret[0].(app.Data)
	return ret0
}

// GetInput indicates an expected call of GetInput.
func (mr *MockIRepositoryMockRecorder) GetInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInput", reflect.TypeOf((*MockIRepository)(nil).GetInput))
}

// GetJSONUrl mocks base method.
func (m *MockIRepository) GetJSONUrl() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJSONUrl")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJSONUrl indicates an expected call of GetJSONUrl.
func (mr *MockIRepositoryMockRecorder) GetJSONUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJSONUrl", reflect.TypeOf((*MockIRepository)(nil).GetJSONUrl))
}

// QueryInput mocks base method.
func (m *MockIRepository) QueryInput() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInput")
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryInput indicates an expected call of QueryInput.
func (mr *MockIRepositoryMockRecorder) QueryInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInput", reflect.TypeOf((*MockIRepository)(nil).QueryInput))
}
